%{
#include<iostream>
#include "y.tab.h"
using namespace std;
int yyparse();
%}
%option yylineno

SPACE [ \t]+
ASSIGN =
EQUALITYCHECK ==
PLUS \+
HASHTAG #
COLON \:
DIRECTIONARROW :>
BIDIRECTIONALARROW ::
PROPERTYSIGN ->
MINUS -
MUL \*
DIV \/
COMMA ,
DOT \.
LESSTHAN <
GREATERTHAN >
LTE <=
GTE >=
NOT !
CONCAT \^
LPARAN \(
RPARAN \)
LCBRACKET \{
RCBRACKET \}
LSBRACKET \[
RSBRACKET \]
DIGIT [0-9]
LETTER [a-zA-Z]
NEWLINE \n
NONSTAR [^\*]
NONSTARNONDIV [^\*/]
NONNEWLINE [^\n]
UNDERSCORE _
STRINGLITERAL	\"([^\"\\\n]|\\\"|\\n|\\t|\\\\)*\" 
BOOL true|false
ID {LETTER}({LETTER}|{DIGIT}|{UNDERSCORE})*
INT ({MINUS}|{PLUS})?{DIGIT}+
FLOAT {INT}"."{DIGIT}+
ENDSTATEMENT ;
COMMENT {DIV}{DIV}{NONNEWLINE}*{NEWLINE}|{DIV}\*({NONSTAR}|\*+{NONSTARNONDIV})*\*+{DIV}
DIRECTEDGRAPH directedGraph
UNDIRECTEDGRAPH undirectedGraph
QUERY Query
EDGE Edge
VERTEX Vertex
VERTEXQUERY {LCBRACKET}{VERTEX}{PROPERTYSIGN}{STRINGLITERAL}{EQUALITYCHECK}({INT}|{STRINGLITERAL}|{BOOL}){RCBRACKET}
EDGEQUERY {LCBRACKET}{EDGE}{PROPERTYSIGN}{STRINGLITERAL}{EQUALITYCHECK}({INT}|{STRINGLITERAL}|{BOOL}){RCBRACKET}
IF \?
AND &
OR \|

%%
{DIRECTEDGRAPH} return DIRECTEDGRAPH;
{UNDIRECTEDGRAPH} return UNDIRECTEDGRAPH ;
{QUERY} return QUERY;
{VERTEXQUERY} return VERTEXQUERY ;
{EDGEQUERY} return EDGEQUERY ;
{VERTEX} return VERTEX ;
{EDGE} return EDGE ;
{DIRECTIONARROW} return DIRECTIONARROW ;
{PROPERTYSIGN} return PROPERTYSIGN;
{BIDIRECTIONALARROW} return BIDIRECTIONALARROW ;
{IF} return IF;
{AND} return AND;
{OR} return OR;
{DOT} return DOT;
{SPACE} ;
{COMMENT} ;
{COMMA} return COMMA ;
{NEWLINE} ;
{ENDSTATEMENT} return ENDSTATEMENT;
{ASSIGN} return ASSIGN;
{NOT} return NOT;
{LTE} return LTE;
{GTE} return GTE ;
{LESSTHAN} return LESSTHAN;
{GREATERTHAN} return GREATERTHAN ;
{EQUALITYCHECK} return EQUALITYCHECK ;
{LCBRACKET} return LCBRACKET;
{RCBRACKET} return RCBRACKET;
{PLUS} return PLUS;
{MINUS} return MINUS;
{MUL} return STAR;
{DIV} return DIV;
{LPARAN} return LPARAN;
{RPARAN} return RPARAN;
{LSBRACKET} return LSBRACKET ;
{RSBRACKET} return RSBRACKET ;
{STRINGLITERAL} return STRINGLITERAL ;
{BOOL} return BOOL ;
{INT} return INT;
{FLOAT} return FLOAT ;
{ID} return ID ;
{HASHTAG} return HASHTAG;
{CONCAT} return CONCAT ;

%%
int yywrap()
{
	return 1;
}
